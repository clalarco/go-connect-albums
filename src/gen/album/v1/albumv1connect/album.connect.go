// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: album/v1/album.proto

package albumv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "example/gen/album/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AlbumServiceName is the fully-qualified name of the AlbumService service.
	AlbumServiceName = "album.v1.AlbumService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AlbumServiceGetProcedure is the fully-qualified name of the AlbumService's Get RPC.
	AlbumServiceGetProcedure = "/album.v1.AlbumService/Get"
	// AlbumServiceGetAllProcedure is the fully-qualified name of the AlbumService's GetAll RPC.
	AlbumServiceGetAllProcedure = "/album.v1.AlbumService/GetAll"
	// AlbumServiceAddProcedure is the fully-qualified name of the AlbumService's Add RPC.
	AlbumServiceAddProcedure = "/album.v1.AlbumService/Add"
	// AlbumServiceDeleteProcedure is the fully-qualified name of the AlbumService's Delete RPC.
	AlbumServiceDeleteProcedure = "/album.v1.AlbumService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	albumServiceServiceDescriptor      = v1.File_album_v1_album_proto.Services().ByName("AlbumService")
	albumServiceGetMethodDescriptor    = albumServiceServiceDescriptor.Methods().ByName("Get")
	albumServiceGetAllMethodDescriptor = albumServiceServiceDescriptor.Methods().ByName("GetAll")
	albumServiceAddMethodDescriptor    = albumServiceServiceDescriptor.Methods().ByName("Add")
	albumServiceDeleteMethodDescriptor = albumServiceServiceDescriptor.Methods().ByName("Delete")
)

// AlbumServiceClient is a client for the album.v1.AlbumService service.
type AlbumServiceClient interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	GetAll(context.Context, *connect.Request[v1.GetAllRequest]) (*connect.Response[v1.GetAllResponse], error)
	Add(context.Context, *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewAlbumServiceClient constructs a client for the album.v1.AlbumService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAlbumServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AlbumServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &albumServiceClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+AlbumServiceGetProcedure,
			connect.WithSchema(albumServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAll: connect.NewClient[v1.GetAllRequest, v1.GetAllResponse](
			httpClient,
			baseURL+AlbumServiceGetAllProcedure,
			connect.WithSchema(albumServiceGetAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		add: connect.NewClient[v1.AddRequest, v1.AddResponse](
			httpClient,
			baseURL+AlbumServiceAddProcedure,
			connect.WithSchema(albumServiceAddMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+AlbumServiceDeleteProcedure,
			connect.WithSchema(albumServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// albumServiceClient implements AlbumServiceClient.
type albumServiceClient struct {
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	getAll *connect.Client[v1.GetAllRequest, v1.GetAllResponse]
	add    *connect.Client[v1.AddRequest, v1.AddResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// Get calls album.v1.AlbumService.Get.
func (c *albumServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetAll calls album.v1.AlbumService.GetAll.
func (c *albumServiceClient) GetAll(ctx context.Context, req *connect.Request[v1.GetAllRequest]) (*connect.Response[v1.GetAllResponse], error) {
	return c.getAll.CallUnary(ctx, req)
}

// Add calls album.v1.AlbumService.Add.
func (c *albumServiceClient) Add(ctx context.Context, req *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error) {
	return c.add.CallUnary(ctx, req)
}

// Delete calls album.v1.AlbumService.Delete.
func (c *albumServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// AlbumServiceHandler is an implementation of the album.v1.AlbumService service.
type AlbumServiceHandler interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	GetAll(context.Context, *connect.Request[v1.GetAllRequest]) (*connect.Response[v1.GetAllResponse], error)
	Add(context.Context, *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewAlbumServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAlbumServiceHandler(svc AlbumServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	albumServiceGetHandler := connect.NewUnaryHandler(
		AlbumServiceGetProcedure,
		svc.Get,
		connect.WithSchema(albumServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	albumServiceGetAllHandler := connect.NewUnaryHandler(
		AlbumServiceGetAllProcedure,
		svc.GetAll,
		connect.WithSchema(albumServiceGetAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	albumServiceAddHandler := connect.NewUnaryHandler(
		AlbumServiceAddProcedure,
		svc.Add,
		connect.WithSchema(albumServiceAddMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	albumServiceDeleteHandler := connect.NewUnaryHandler(
		AlbumServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(albumServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/album.v1.AlbumService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AlbumServiceGetProcedure:
			albumServiceGetHandler.ServeHTTP(w, r)
		case AlbumServiceGetAllProcedure:
			albumServiceGetAllHandler.ServeHTTP(w, r)
		case AlbumServiceAddProcedure:
			albumServiceAddHandler.ServeHTTP(w, r)
		case AlbumServiceDeleteProcedure:
			albumServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAlbumServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAlbumServiceHandler struct{}

func (UnimplementedAlbumServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("album.v1.AlbumService.Get is not implemented"))
}

func (UnimplementedAlbumServiceHandler) GetAll(context.Context, *connect.Request[v1.GetAllRequest]) (*connect.Response[v1.GetAllResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("album.v1.AlbumService.GetAll is not implemented"))
}

func (UnimplementedAlbumServiceHandler) Add(context.Context, *connect.Request[v1.AddRequest]) (*connect.Response[v1.AddResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("album.v1.AlbumService.Add is not implemented"))
}

func (UnimplementedAlbumServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("album.v1.AlbumService.Delete is not implemented"))
}
