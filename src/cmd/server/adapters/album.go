package adapters

import (
	"context"
	"log"

	"connectrpc.com/connect"

	albumv1 "example/gen/album/v1" // generated by protoc-gen-go
	// generated by protoc-gen-connect-go
	albums "clalarco.io/modules/albums"
)

const versionTag = "Album-Version"
const versionValue = "v1"

type AlbumServer struct {
	handler *albums.Handler
}



func (s *AlbumServer) Init() {
	s.handler = albums.GetHandler()
}

func (s *AlbumServer) Get(
	ctx context.Context,
	req *connect.Request[albumv1.GetRequest],
) (*connect.Response[albumv1.GetResponse], error) {
	log.Println("Request headers: ", req.Header())
	response, err := s.handler.DB.GetAlbum(req.Msg.Id)
	res := connect.NewResponse(
		&albumv1.GetResponse{
			Album: toProto(response),
	})
	res.Header().Set(versionTag, versionValue)
	return res, err
}

func (s *AlbumServer) GetAll(
	ctx context.Context,
	req *connect.Request[albumv1.GetAllRequest],
) (*connect.Response[albumv1.GetAllResponse], error) {
	log.Println("Request headers: ", req.Header())
	response, err := s.handler.DB.GetAlbums()
	res := connect.NewResponse(
		&albumv1.GetAllResponse{
			Albums: toProtoMap(response),
	})
	res.Header().Set(versionTag, versionValue)
	return res, err
}

func (s *AlbumServer) Add(
	ctx context.Context,
	req *connect.Request[albumv1.AddRequest],
) (*connect.Response[albumv1.AddResponse], error) {
	album := albums.Album{
		// copy fields from req.Msg.Album to album
		ID:    req.Msg.Album.Id,
		Title: req.Msg.Album.Title,
		Artist: req.Msg.Album.Artist,
		Price:  float64(req.Msg.Album.Price),
	}
	err := s.handler.DB.AddAlbum(album)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	res := connect.NewResponse(
		&albumv1.AddResponse{
			Id: album.ID,
	})
	res.Header().Set(versionTag, versionValue)
	return res, nil
}

func (s *AlbumServer) Delete(
	ctx context.Context,
	req *connect.Request[albumv1.DeleteRequest],
) (*connect.Response[albumv1.DeleteResponse], error) {
	err := s.handler.DB.DeleteAlbum(req.Msg.Id)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	res := connect.NewResponse(
		&albumv1.DeleteResponse{
			Id: req.Msg.Id,
	})
	res.Header().Set(versionTag, versionValue)
	return res, nil
}

func toProtoMap(album []albums.Album) map[string]*albumv1.Album {
	responses := map[string]*albumv1.Album{}
	for _, alb := range album {
		responses[alb.ID] = toProto(alb)
	}
	return responses
}

func toProto(album albums.Album) *albumv1.Album {
	var response albumv1.Album
	response.Id = album.ID
	response.Title = album.Title
	response.Artist = album.Artist
	response.Price = float32(album.Price)
	return &response
}